package com.inventory.app.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
//import org.springframework.web.bind.annotation.RequestAttribute;
//import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttribute;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.inventory.app.model.Products;
import com.inventory.app.model.Users;
import com.inventory.app.model.WorkOrders;
import com.inventory.app.repository.ProductRepository;
import com.inventory.app.repository.WorkOrderRepository;
//import com.inventory.app.repository.WorkOrderRepository;
import com.inventory.app.service.ProductService;
import com.inventory.app.service.UserService;
import com.inventory.app.service.WorkOrderService;
import com.inventory.app.utils.DataValidation;
import com.inventory.app.utils.WebUtils;

@Controller
@SessionAttributes({ "loggedInuser", "role" })
public class AppController {

	@Autowired
	private UserService userService;
	
	@Autowired
	private ProductService productService;
	
	@Autowired
	private WorkOrderService workOrderService;
	
	@Autowired
	private ProductRepository productRepository;
	
	@Autowired
	private WorkOrderRepository workOrderRepository;

	@Autowired
	private WebUtils webUtils;

	@Autowired
	private DataValidation dataValidation;


	@GetMapping("index")
	String index(Model model) throws IllegalStateException, IOException {
		model.addAttribute("page", "Home Page");
		model.addAttribute("list", productService.findAll());
		return "index";
	}

	@GetMapping("contact")
	String cont(Model model) {
		model.addAttribute("msg", "This is contact us page");
		return "contact";

	}

	@GetMapping("about")
	String about(Model model) {
		model.addAttribute("msg", "This is about us page");
		return "about";

	}

	@GetMapping({"/", "login"})
	String login(Model model) {
		model.addAttribute("msg", "Login");
		return "login";

	}

	
	@GetMapping("message-{msg}")
	String message(@PathVariable String msg, Model model) {

		model.addAttribute("msg", msg);

		return "index";

	}

	@PostMapping("login")
	String login(@RequestParam String email, @RequestParam String password, Model model, RedirectAttributes redirect) {

		Optional<Users> findUser = userService.login(email, password);
		if (findUser.isPresent()) {
			model.addAttribute("role", findUser.get().getRole());
			model.addAttribute("loggedInuser", findUser.get().getEmail());
			redirect.addFlashAttribute("msg", " Login Success  " + email);

		} else {
			redirect.addFlashAttribute("error", "Invalid Credentials  ");
			return "redirect:/login";
		}

		return "redirect:/index";
	}

	@GetMapping("signup")
	String signUp(Model model) {
		model.addAttribute("user", new Users());
		return "signup";

	}

	@PostMapping("register")
	String register(@ModelAttribute("user") Users user, BindingResult result, RedirectAttributes redirect,
			Model model) {

		try {
			dataValidation.validate(user, result);
			if (result.hasErrors()) {
				return "signup";
			}

			user.setRole("USER");
			userService.save(user);
			model.addAttribute("role", user.getRole());
			model.addAttribute("loggedInuser", user.getEmail());
			redirect.addFlashAttribute("msg", "Registration success");
		} catch (Exception e) {
			e.printStackTrace();
		}

		return "redirect:/index";
	}

	@GetMapping("profile")
	String profile(@SessionAttribute("loggedInuser") String email, Model model) {

		try {
			model.addAttribute("user_account", userService.findByEmail(email).get());
			model.addAttribute("msg", "Welcome");
		} catch (Exception e) {
			e.printStackTrace();
		}

		return "index";

	}

	@GetMapping("logout")
	String logout(HttpSession session, SessionStatus status, Model model) {
		status.setComplete();
		session.invalidate();
		model.addAttribute("loggedInuser", "");
		model.addAttribute("role", "");
		model.addAttribute("success", "You have been logged out");
		return "login";

	}
	@GetMapping("deleteproduct")
	String delet(@RequestParam Long id, RedirectAttributes model) {
		try {
			productRepository.deleteById(id);
			webUtils.deletefolder(5);
			model.addFlashAttribute("success", "Delete Success");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "redirect:/index";

	}

	@GetMapping("deleteorder")
	String delete(@RequestParam Long id, RedirectAttributes model) {
		try {
			workOrderRepository.deleteById(id);
			webUtils.deletefolder(5);
			model.addFlashAttribute("success", "Delete Success");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "redirect:/orders";

	}

	@PostMapping("search")
	String search(Model model, @RequestParam String keyword) {
		try {
			model.addAttribute("list", userService.findByName(keyword));
			model.addAttribute("msg", "results found for " + keyword);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "users";

	}


	@PostMapping("/addimages")
	public String add(@RequestParam("file") MultipartFile file, @RequestParam Long id, RedirectAttributes model) {

		Pattern ext = Pattern.compile("([^\\s]+(\\.(?i)(png|jpg))$)");
		try {

			if (file != null && file.isEmpty()) {
				model.addFlashAttribute("error", "Error No file Selected ");
				return "redirect:profile";
			}
			if (file.getSize() > 1073741824) {
				model.addFlashAttribute("error",
						"File size " + file.getSize() + "KB excceds max allowed, try another photo ");
				return "redirect:profile";
			}
			Matcher mtch = ext.matcher(file.getOriginalFilename());

			if (!mtch.matches()) {
				model.addFlashAttribute("error", "Invalid Image type ");
				return "redirect:profile";
			}

			// save image
			webUtils.addProfilePhoto(file, id, "users");
			model.addFlashAttribute("msg", "Upload success " + file.getSize() + " KB");

		} catch (Exception e) {
			// e.printStackTrace);
		}

		return "redirect:index";
	}

	@PostMapping("request-passord-reset")
	String resetpass(Model model, @RequestParam String email) {
		try {
			Optional<Users> findUser = userService.findByEmail(email);
			if (findUser.isPresent()) {
				Users usr = findUser.get();
				Random random = new Random();
				String token = String.format("%04d", random.nextInt(10000));
				usr.setToken(token);
				userService.save(usr);
				model.addAttribute("email", email);
				webUtils.sendMail(email, "Please use this token to reset your password " + token, "Password Reset");
			} else {
				model.addAttribute("error", "No user account found with " + email);
				return "login";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "resetpassword";
	}

	@PostMapping("resetpassword")
	String resetpassword(RedirectAttributes red, Model model, @RequestParam String email, @RequestParam String token,
			@RequestParam String password) {
		try {
			String passwordRegex = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&+=])(?=\\S+$).{8,}$";

			if (!password.matches(passwordRegex)) {
				model.addAttribute("error",
						"Password should be at least 8 characters, lower case, upper case and a special character.");
				model.addAttribute("email", email);
				return "resetpassword";
			}
			Optional<Users> findUser = userService.findByEmail(email);
			if (findUser.isPresent() && token.equals(findUser.get().getToken())) {
				Users usr = findUser.get();
				usr.setToken("");
				usr.setPassword(password);
				userService.save(usr);
				model.addAttribute("role", usr.getRole());
				model.addAttribute("loggedInuser", usr.getEmail());
				red.addFlashAttribute("success",
						"Password reset success thanks, please contact admin if you did not perform this change");
				webUtils.sendMail(email,
						"Password reset success thanks, please contact admin if you did not perform this change",
						"Password Reset");
				return "redirect:profile";
			} else {
				model.addAttribute("error", "Invalid token");
				model.addAttribute("email", email);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "resetpassword";
	}

	@PostMapping("sendemail")
	String sendemail(Model model, @RequestParam String email, @RequestParam String name, @RequestParam String message,
			@RequestParam String subject) {
		try {
			webUtils.sendMail(email, message + " From " + name, subject);
			model.addAttribute("msg", "Thank you " + name + ". Email sent :) ");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "contact";
	}

	@ModelAttribute("update")
	Users update() {
		return new Users();
	}

	@PostMapping("updateuser")
	String updateuser(@ModelAttribute Users update, Model model) {

		try {
			userService.findById(update.getId()).ifPresent(user -> {
				user.setFname(update.getFname());
				user.setLname(update.getLname());
				userService.save(user);
			});
			model.addAttribute("msg", "Update success");
		} catch (Exception e) {
			e.printStackTrace();
		}

		return "redirect:orders";

	}

	@ModelAttribute("update")
	Users users() {
		return new Users();
	}

	@GetMapping("expired")
	String exp(Model model, SessionStatus status) {
		status.setComplete();
		model.addAttribute("loggedInuser", "");
		model.addAttribute("role", "");
		model.addAttribute("expired", "You have been logged out due to inactivity");

		return "login";

	}

	@GetMapping("addproduct")
	String addp(Model model, Products product, RedirectAttributes redirect) {
		model.addAttribute("msg", "Add Product");
		//productService.save(product);
		return "addProduct";

	}

	@PostMapping("add")
	String addproduct(@ModelAttribute("product") Products product, BindingResult result, RedirectAttributes redirect,
			Model model) {

		try {
			if (result.hasErrors()) {
				return "redirect:index";
			}

			productService.save(product);
			model.addAttribute("list", productService.findAll());
			redirect.addFlashAttribute("msg", "Product Added");
		} catch (Exception e) {
			e.printStackTrace();
		}

		return "redirect:/index";
	}
	@GetMapping("workorder")
	String worko(Model model, RedirectAttributes redirect) {
		model.addAttribute("msg", "Create Work Order");
		model.addAttribute("workorder", new WorkOrders());
		model.addAttribute("products", productService.findAll());
		return "workOrder";

	}

	@PostMapping("work")
	String workorder(WorkOrders workorder, @RequestParam("products") Long[] products, BindingResult result, RedirectAttributes redirect,
			Model model) {

		System.out.println("products added: "+ products.length);
		try {

			if (result.hasErrors()) {
				return "workOrder";
			}
			
			List<Products> workOrderProducts = new ArrayList<>();
			if(products != null && products.length > 0) {
				for(int i=0; i< products.length; i++) {
						Optional<Products> p =productService.findById(products[i]);
						if(p.isPresent()) {
							workOrderProducts.add(p.get());
						}
				}
			}
			workorder.setWorkOrderProducts(workOrderProducts);
			
           double a = workorder.getAcres()*.32;
           double amount = a*4;
           workorder.setAmount(amount);
           workOrderService.save(workorder);
			redirect.addFlashAttribute("msg", "Work Order Created");
		} catch (Exception e) {
			e.printStackTrace();
		}

		return "redirect:/orders";
	}
	
	@PostMapping ("complete")
	String completeOrder(@RequestParam Long workorderId, Model model, RedirectAttributes redirect, Products product) {
		Optional<WorkOrders> order = workOrderService.findById(workorderId);
		
		if(order.isPresent()) {
			order.get().setComplete(true);
			workOrderService.save(order.get());
		}//productRepository.findByName(order.get().getWorkOrderProducts().get(0).getId());
	double a =	order.get().getAmount();
//	for (int i = 0; i < order.get().getProduct().length();i++) { 
//		int f = i;
//	}
	Optional<Products> products = productRepository.findById(order.get().getWorkOrderProducts().get(0).getId());
	
	double b = Double.parseDouble(products.get().getAmount());
	double total = b-a;

	products.get().setAmount(String.valueOf(total));
	productRepository.save(products.get());
	//productRepository.findById(order.get().getWorkOrderProducts().get(0).getId()).get().setAmount(String.valueOf(total));
		return "redirect:/orders";
	}
	
	@GetMapping("orders")
	String orders(Model model) {
		model.addAttribute("msg", "This is orders page");
		model.addAttribute("order", workOrderService.findAll());
		return "orders";
	}
	
	@GetMapping("makeworkorders")
	public String makeworkorders(Model model) {
		return "makeworkorders";
	}
	
	@PostMapping("makeworkorders")
	public String makework(RedirectAttributes red, Model model, @RequestParam String email,
			@RequestParam String password, @RequestParam Long workorder) {
		System.out.println("controller test");
	     try {
			Optional<Users> findUser = userService.findByEmail(email);
			List<WorkOrders> work = workOrderService.findAll();
			if (findUser.isPresent()) {
				webUtils.sendEmail(work, "Work Orders", "complete this");
				model.addAttribute("msg", "Thank you Email sent :) ");

				return "redirect:/orders";
			} else {
				model.addAttribute("error", "Invalid email");
				model.addAttribute("email", email);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "orders";
	}
}
